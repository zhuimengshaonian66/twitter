{"version":3,"file":"4.6897acd8528cecf203c5.hot-update.js","sources":["webpack:///client/components/TweetComposer.js","webpack:///client/web3/tweets.js"],"sourcesContent":["import { createTweet } from '../web3/tweets'\nimport Button from './Button'\n\nexport default class ComposeModal extends React.Component {\n  state = {\n    text: \"\",\n  }\n\n  handleChange = e => {\n    this.setState({\n      text: e.target.value,\n    });\n  }\n\n  post = async () => {\n    const { text } = this.state\n    const { onClose } = this.props\n\n    await createTweet(text)\n\n    alert(\"Your tweet was posted!\")\n\n    onClose()\n  }\n\n  render() {\n    const { onClose } = this.props\n    const { text } = this.state\n\n    const disabled = (text === \"\")\n\n    return (\n      <div>\n        <h3>\n          Post a new tweet\n        </h3>\n\n        <textarea\n          value={text}\n          onChange={this.handleChange}\n          maxLength={140}\n        />\n\n        <Button\n          onClick={this.post}\n          disabled={disabled}\n          style={{\n            marginTop: 12,\n            float: 'right',\n          }}\n        >\n          Post tweet\n        </Button>\n\n        <style jsx>{`\n          textarea {\n            box-sizing: border-box;\n            margin: 0px;\n            margin-top: 10px;\n            border: 2px solid rgba(107,108,139,0.58);\n            border-radius: 7px;\n            width: 100%;\n            padding: 11px;\n            font-size: 16px;\n          }\n          textarea:focus {\n            outline: none;\n          }\n        `}</style>\n      </div>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// client/components/TweetComposer.js","import { eth, getInstance } from './provider'\n\nimport TweetStorage from \"./artifacts/TweetStorage.json\"\nimport TweetController from \"./artifacts/TweetController.json\"\nimport { getUserInfo } from './users'\nexport const createTweet = async (text) => {\n  const controller = await getInstance(TweetController)\n  const addresses = await eth.getAccounts()\n\n  // \"createTweet\" wants both the user ID and the text as params for now:\n const result = await controller.createTweet(text, {\n    from: addresses[0],\n  })\n\n  return result\n}\n\nexport const getTweetInfo = async (tweetId) => {\n  const storage = await getInstance(TweetStorage)\n  const tweet = await storage.tweets.call(tweetId)\n\n  const [id, text, userId, postedAt] = tweet\n\n  // Parse the data to make it look nice:\n  return {\n    id: parseInt(id),\n    userId: parseInt(userId),\n    text,\n    postedAt: parseInt(postedAt),\n  }\n}\n\n\nexport const getTweetIdsFromUser = async (userId) => {\n  const storage = await getInstance(TweetStorage)\n  const tweetIds = await storage.getTweetIdsFromUser.call(userId)\n\n  return tweetIds.map(tweetId => parseInt(tweetId))\n}\n\nexport const loadTweetsFromTweetPromises = async (tweetPromises) => {\n  const tweets = await Promise.all(tweetPromises)\n\n  const userPromises = tweets.map(tweet => {\n    const { userId } = tweet\n    return getUserInfo(userId)\n  })\n\n  const users = await Promise.all(userPromises)\n\n  return tweets.map((tweet, index) => {\n    return {\n      user: users[index],\n      ...tweet,\n    }\n  })\n}\n\n\nexport const getLatestTweetIds = async (amount = 5, page = 1) => {\n  const storage = await getInstance(TweetStorage)\n\n  const numTweets = await storage.getNumTweets.call()\n  const tweetIdPromises = []\n\n  const lastIndex = numTweets - 1 // Latest\n  const pageIndex = page - 1\n  const startIndex = lastIndex - (amount * pageIndex)\n  const maxIndex = startIndex - amount\n\n  for (let i = startIndex; i > maxIndex; i--) {\n    if (i < 0) break\n\n    tweetIdPromises.push(storage.tweetIds(i))\n  }\n\n  const tweetIds = await Promise.all(tweetIdPromises)\n\n  return tweetIds\n}\n\n\n\n// WEBPACK FOOTER //\n// client/web3/tweets.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;;;;;AAIA;AACA;AACA;AADA;AAGA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAMA;AAEA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAUA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAuCA;;;;;;;;;;;AApEA;AACA;AADA;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAMA;AADA;AACA;AANA;AAKA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAQA;AACA;AACA;AACA;AAJA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAIA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AANA;AAAA;AACA;AADA;AAQA;AARA;AAWA;AACA;AADA;AAIA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAcA;AACA;AAfA;AAWA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAiBA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAtDA;AAYA;AAgBA;AAOA;AAmBA;;;;;;;;;A","sourceRoot":""}